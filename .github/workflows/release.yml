name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  cpp-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch origin/main
        run: git fetch origin main

      - name: Ensure tag is on main
        run: |
          TAG_COMMIT=$(git rev-parse ${{ github.ref_name }})
          MAIN_COMMIT=$(git rev-parse origin/main)
          
          echo "Tag points to:     $TAG_COMMIT"
          echo "Main branch head:  $MAIN_COMMIT"
          
          if [ "$TAG_COMMIT" != "$MAIN_COMMIT" ]; then
            echo "❌ Tag does not point to the latest commit on main. Aborting release."
            exit 1
          fi

      - name: Write version to file
        run: echo "${{ github.ref_name }}" > VERSION.txt

      - name: Create C++ release archive
        run: |
          mkdir -p cpp_biquad_filters
          cp VERSION.txt cpp_biquad_filters/
          cp -r cpp/inc cpp_biquad_filters/
          cp LICENSE cpp_biquad_filters/
          cd cpp_biquad_filters
          zip -r ../cpp_biquad_filters.zip .

      - name: Upload Release and Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: |
            cpp_biquad_filters.zip
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  rust-release:
    if: github.event.pull_request.paths_any == 'rust/**'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"

      - name: Update version in Cargo.toml
        run: |
          sed -i.bak -E "s/^version = \".*\"/version = \"${{ steps.version.outputs.version }}\"/" Cargo.toml
          cat Cargo.toml

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish