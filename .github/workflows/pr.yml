name: PR-Check

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  cpp-build:
    if: github.event.pull_request.paths_any == 'cpp/**'
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Debug, Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cpp/build" >> "$GITHUB_OUTPUT"

      - name: Install GTest on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtest-dev cmake ninja-build
          cd /usr/src/gtest
          sudo cmake -G Ninja .
          sudo ninja
          sudo cp lib/*.a /usr/lib

      - name: Install Ninja and GTest on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install ninja --yes
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg install gtest
          echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $env:GITHUB_ENV

      - name: Set up MSVC environment
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $VSINSTALLDIR = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          if (-Not $VSINSTALLDIR) { throw "Visual Studio installation not found" }
          echo "Found Visual Studio at: $VSINSTALLDIR"
          
          $VCVARS = "$VSINSTALLDIR\VC\Auxiliary\Build\vcvarsall.bat"
          echo "Running vcvarsall.bat"
          
          # Run vcvarsall.bat with /Qspectre- added
          $VCVARS_OUTPUT = cmd.exe /c "call `"$VCVARS`" x64 >nul && set CXXFLAGS=/Qspectre- && set CFLAGS=/Qspectre- && set"
          
          # Extract required environment variables
          $VCVARS_OUTPUT -split "`r`n" | ForEach-Object {
              if ($_ -match "^(Path|INCLUDE|LIB|LIBPATH|VCToolsInstallDir|VisualStudioVersion|VSINSTALLDIR|CXXFLAGS|CFLAGS)=") {
                  echo "$_" >> $env:GITHUB_ENV
              }
          }

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          ${{ matrix.os == 'windows-latest' && format('-DCMAKE_TOOLCHAIN_FILE={0}/vcpkg/scripts/buildsystems/vcpkg.cmake', github.workspace) || '' }}
          --preset ${{ matrix.build_type }}
          -S ${{ github.workspace }}/cpp

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure --verbose

  rust-build:
    if: github.event.pull_request.paths_any == 'rust/**'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Test Rust implementation
        run: |
          cargo test